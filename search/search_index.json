{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FAR: Full Auto Robots 10tothe6 here. Welcome to my little side project! Pretty much, we do unecessary things with FRC robots.","title":"Home"},{"location":"#far-full-auto-robots","text":"10tothe6 here. Welcome to my little side project! Pretty much, we do unecessary things with FRC robots.","title":"FAR: Full Auto Robots"},{"location":"dt_about/","text":"What's DriveTools? DriveTools is a customizable FRC Dashboard (a program that allows you to display data coming in from an FRC robot). It's meant for use both in-house for testing and in-competition during matches. It communicates with FRC robots using NetworkTables (specifically the NT3 protocol). What is that? Find out here or here , more specifics here . Code examples are usually provided when talking about robot code, but it's always good to have background knowledge. Why did you make it? I don't have a nice, clean answer to this question. I guess after realizing that a custom dashboard was within reach, I just wanted to try making one. So there, curiosity is the best answer I can give. All the rest I found out after I had already started. Still, now that DriveTools exists I can do a lot more interesting things with FRC robots. It makes it easy to display stuff other than a single robot on the field display, which for one is very useful. That said I may have just not looked at other softwares that can do this. Why did you make a dashboard with a game engine? Right so the observant among you have realized that DriveTools was made with the Unity game engine. I did this for two reasons: One, I was already familiar with both it and C#, and the NetworkTables plugin I found worked with it. Two, I knew I wanted 3D functionality in DriveTools, and Unity had built-in 3D rendering. I hadn't written any 3D renderers by that time, and thought that was way further out of reach.","title":"About"},{"location":"dt_about/#whats-drivetools","text":"DriveTools is a customizable FRC Dashboard (a program that allows you to display data coming in from an FRC robot). It's meant for use both in-house for testing and in-competition during matches. It communicates with FRC robots using NetworkTables (specifically the NT3 protocol). What is that? Find out here or here , more specifics here . Code examples are usually provided when talking about robot code, but it's always good to have background knowledge.","title":"What's DriveTools?"},{"location":"dt_about/#why-did-you-make-it","text":"I don't have a nice, clean answer to this question. I guess after realizing that a custom dashboard was within reach, I just wanted to try making one. So there, curiosity is the best answer I can give. All the rest I found out after I had already started. Still, now that DriveTools exists I can do a lot more interesting things with FRC robots. It makes it easy to display stuff other than a single robot on the field display, which for one is very useful. That said I may have just not looked at other softwares that can do this.","title":"Why did you make it?"},{"location":"dt_about/#why-did-you-make-a-dashboard-with-a-game-engine","text":"Right so the observant among you have realized that DriveTools was made with the Unity game engine. I did this for two reasons: One, I was already familiar with both it and C#, and the NetworkTables plugin I found worked with it. Two, I knew I wanted 3D functionality in DriveTools, and Unity had built-in 3D rendering. I hadn't written any 3D renderers by that time, and thought that was way further out of reach.","title":"Why did you make a dashboard with a game engine?"},{"location":"dt_bugreport/","text":"Reporting A Bug With DriveTools If you ever find something that you think isn't working properly (if you're not sure you can try looking at the docs), then you should email me ( 10tothe6 ) at full-auto-robots@gmail.com ! Do not try reaching out any other way! I want to make sure all of the incoming reports go to the same place! Even if it's a small issue, the fact that it's there means I missed it so do let me know. I can't guarantee how fast issues will be fixed, but I'll get on it as soon as I can. I will NOT email you back once the issue has been fixed, so pay attention to the github released for an updated version. Feature Requests/Ideas Feel free to email me about feature ideas/requests as well, but there's a chance I won't listen either because it's too complicated or because I disagree with the feature. I will email you back in this case, either letting you know I'm working on it or that I won't be.","title":"Reporting A Bug"},{"location":"dt_bugreport/#reporting-a-bug-with-drivetools","text":"If you ever find something that you think isn't working properly (if you're not sure you can try looking at the docs), then you should email me ( 10tothe6 ) at full-auto-robots@gmail.com ! Do not try reaching out any other way! I want to make sure all of the incoming reports go to the same place! Even if it's a small issue, the fact that it's there means I missed it so do let me know. I can't guarantee how fast issues will be fixed, but I'll get on it as soon as I can. I will NOT email you back once the issue has been fixed, so pay attention to the github released for an updated version.","title":"Reporting A Bug With DriveTools"},{"location":"dt_bugreport/#feature-requestsideas","text":"Feel free to email me about feature ideas/requests as well, but there's a chance I won't listen either because it's too complicated or because I disagree with the feature. I will email you back in this case, either letting you know I'm working on it or that I won't be.","title":"Feature Requests/Ideas"},{"location":"dt_development/","text":"Making An FRC Dashboard Okay so for whatever reason, DriveTools isn't good enough for you. Instead of emailing me at full-auto-robots@gmail.com and explaning what you would add (do consider reaching out, I want this software to be as good as possible) you just want to make your own software. Fine. That's pretty much what I did when I made DriveTools in the first place. Read on, then. A word of warning Programming an FRC Dashboard from scratch is not easy. Unlike programming an FRC robot, nobody is giving you template projects that you can build off of and there are less people who are going to have the same problems as you. If you are an inexperienced software developer, I'd be weary of trying something like this out. It's not that I don't think it'll work as a learning experience. I actually think the opposite, diving into a project tends to teach you a lot (check out the old DriveTools to see the difference between my skills then and now). But notice how I said software developer , not coder ? If you want to make a dashboard and plan on publishing it, you've gotta make some smart decisions when designing it. Otherwise you'll hit roadblocks later. I'm not here to give a course on software design (I don't think I'm really qualified to, anyhow). If you're thinking about it, why not try it? Just don't be afraid to start things over if necessary. Building off of DriveTools The source files are on GitHub, after all. I might write a tutorial on how to modify DriveTools later, but really all you need to do to start messing around is download Unity - which is free. That's the engine that I used to make DriveTools. I actually recommend not doing this. The above warning not only still applies, but I think you'll be worse off. Things might get complicated if you're trying to do more than tweak a few things. You're welcome to try it, though. (Just don't go acting like you made it yourself.) Vital resources The most important thing when making an FRC Dashboard is the ability to work with NetworkTables. I wrote DriveTools in C# , the language that Unity uses, so I needed a version of NetworkTables that worked in C#. Finding this was actually the reason that I set out to make DriveTools in the first place. You have three options: NT3, as a wrapper: NT3, fully translated: NT4:","title":"I Want To Make A Dashboard!"},{"location":"dt_development/#making-an-frc-dashboard","text":"Okay so for whatever reason, DriveTools isn't good enough for you. Instead of emailing me at full-auto-robots@gmail.com and explaning what you would add (do consider reaching out, I want this software to be as good as possible) you just want to make your own software. Fine. That's pretty much what I did when I made DriveTools in the first place. Read on, then.","title":"Making An FRC Dashboard"},{"location":"dt_development/#a-word-of-warning","text":"Programming an FRC Dashboard from scratch is not easy. Unlike programming an FRC robot, nobody is giving you template projects that you can build off of and there are less people who are going to have the same problems as you. If you are an inexperienced software developer, I'd be weary of trying something like this out. It's not that I don't think it'll work as a learning experience. I actually think the opposite, diving into a project tends to teach you a lot (check out the old DriveTools to see the difference between my skills then and now). But notice how I said software developer , not coder ? If you want to make a dashboard and plan on publishing it, you've gotta make some smart decisions when designing it. Otherwise you'll hit roadblocks later. I'm not here to give a course on software design (I don't think I'm really qualified to, anyhow). If you're thinking about it, why not try it? Just don't be afraid to start things over if necessary.","title":"A word of warning"},{"location":"dt_development/#building-off-of-drivetools","text":"The source files are on GitHub, after all. I might write a tutorial on how to modify DriveTools later, but really all you need to do to start messing around is download Unity - which is free. That's the engine that I used to make DriveTools. I actually recommend not doing this. The above warning not only still applies, but I think you'll be worse off. Things might get complicated if you're trying to do more than tweak a few things. You're welcome to try it, though. (Just don't go acting like you made it yourself.)","title":"Building off of DriveTools"},{"location":"dt_development/#vital-resources","text":"The most important thing when making an FRC Dashboard is the ability to work with NetworkTables. I wrote DriveTools in C# , the language that Unity uses, so I needed a version of NetworkTables that worked in C#. Finding this was actually the reason that I set out to make DriveTools in the first place. You have three options: NT3, as a wrapper: NT3, fully translated: NT4:","title":"Vital resources"},{"location":"dt_docs/","text":"The DriveTools Documentation Welcome, this is where all information on using this interesting bit of software will eventually be stored.","title":"Docs Home Page"},{"location":"dt_docs/#the-drivetools-documentation","text":"Welcome, this is where all information on using this interesting bit of software will eventually be stored.","title":"The DriveTools Documentation"},{"location":"dt_dsp_button/","text":"","title":"Button Display"},{"location":"dt_dsp_creating/","text":"Creating Display Objects Just click the 'new display button' that looks like this: [image of button] Then, pick whatever type you want. Originally Drivetools had a feature where you could view a list of keys that were currently on NetworkTables, and just click one of them to automatically spawn a node with the correct type and NT key already set. As convinient as this was, it was removed and WILL NOT BE RE-ADDED due to problems with the networking implementation that I cannot fix. So anyone who has this idea, if you're reading this, yes I did already think about it.","title":"Creating Displays"},{"location":"dt_dsp_creating/#creating-display-objects","text":"Just click the 'new display button' that looks like this: [image of button] Then, pick whatever type you want. Originally Drivetools had a feature where you could view a list of keys that were currently on NetworkTables, and just click one of them to automatically spawn a node with the correct type and NT key already set. As convinient as this was, it was removed and WILL NOT BE RE-ADDED due to problems with the networking implementation that I cannot fix. So anyone who has this idea, if you're reading this, yes I did already think about it.","title":"Creating Display Objects"},{"location":"dt_dsp_editing/","text":"Editing Nodes All nodes, no matter the type, can be edited by right-clicking them and pressing 'edit'. You can also delete them, or fullscreen them this way. Of course some nodes have special editors (like Field2D).","title":"Editing Displays"},{"location":"dt_dsp_editing/#editing-nodes","text":"All nodes, no matter the type, can be edited by right-clicking them and pressing 'edit'. You can also delete them, or fullscreen them this way. Of course some nodes have special editors (like Field2D).","title":"Editing Nodes"},{"location":"dt_dsp_field2d/","text":"Field2D Displays [image of what it looks like] These are one of the most useful display objects that you can use. They can be used to visualize data coming from the bot, or upload data to the robot, or even command the robot by sending it coordinates. You could use them to see the position/rotation of the robot, show paths and shapes, things like that. Things to be familiar with: robot programming with DriveTools the nav_robot class the nav_path class the nav_field class Getting The Data Field2D displays can take in one of TWO data types from NetworkTables. Either a nav_robot by itself, or a whole nav_field class if you want to display more than a robot's position and rotation. In any case, just edit the display and set the NT Key to wherever your data class is located. Elements of A Field Robots If you read the page about the nav_robot class, then you'll know what kind of data you'll need. Field2D nodes have an array of nav_robot classes, which get turned into strings the same way that an individual nav_robot class would via nav_robot.EncodeToString(). This is done so that tracking multiple bots can be supported. Paths Field2D nodes have an array of nav_path classes as well. These can represent really whatever you want, as long as whatever you want is a collection of points in 3D space. Some ideas: * A trail showing where the robot has been * A visualization of an auto * Estimated positions of the robot (though you could use more nav_robot classes for this) Markers Field markers (the nav_marker class) represent things. They're just images that have a position, rotation, and scale. You can use them to represent Apriltags that the robot can see, game pieces that it has detected, or you can use them as ways to show events like an impact (which could ruin odometry). You can draw anything you want using nav_path classes, but using a nav_marker is usually quicker. The Field Editor As mentioned at the top of this page, Field2D nodes can also be used to send data as well as receive it. You do this by clicking the little pencil icon in the top left of the display, which opens the field editor . [image of editor button] This editor allows you to manually draw paths, place robots, or place markers on the field by clicking. Adding/Removing Field Elements Field elements of each type can be added by clicking the plus icon next to the name. You'll see an entry appear in the corresponding list for the new field element, and depending on what it is you can place it onto the field. For paths, creating a new path puts the editor into 'draw mode'. You click to place new path points, and either press 'Enter' or click the checkmark button to finish drawing the path. For robots/markers, just move your mouse to wherever you want to place it and left-click to place. Before you place it, you can use the scrollwheel to rotate it. After placing a field element you can change it via the list entry. Paths can be re-drawn and their color can be changed, robot settings can be edited, and so on. Removing a field element is as simple as clicking the red 'x' to the right of it's entry in the list. Uploading The Finished Field When finished, you can click the 'save' button. This will convert the field that you made into a string, and send it to NetworkTables. Now any code that you set up to read from that NetworkTables key can use the field data for whatever you want. Also, pressing the save button will tell Drivetools to save the data in the loaded layout (.lyt file) automatically. That way, closing and re-opening the software will preserve exactly the field in the editor. Not all NetworkTables data gets saved in the layout! It's only the data that you yourself pushed manually . Trying To Get/Receive Data At The Same Time ...just don't. Don't try this. When in the field editor the Field2D node will in theory ignore whatever's happening on NetworkTables, but it's better to not try and use the Field2D nodes as two-way, unless you really know what you're doing.","title":"Field2D Display"},{"location":"dt_dsp_field2d/#field2d-displays","text":"[image of what it looks like] These are one of the most useful display objects that you can use. They can be used to visualize data coming from the bot, or upload data to the robot, or even command the robot by sending it coordinates. You could use them to see the position/rotation of the robot, show paths and shapes, things like that.","title":"Field2D Displays"},{"location":"dt_dsp_field2d/#things-to-be-familiar-with","text":"robot programming with DriveTools the nav_robot class the nav_path class the nav_field class","title":"Things to be familiar with:"},{"location":"dt_dsp_field2d/#getting-the-data","text":"Field2D displays can take in one of TWO data types from NetworkTables. Either a nav_robot by itself, or a whole nav_field class if you want to display more than a robot's position and rotation. In any case, just edit the display and set the NT Key to wherever your data class is located.","title":"Getting The Data"},{"location":"dt_dsp_field2d/#elements-of-a-field","text":"","title":"Elements of A Field"},{"location":"dt_dsp_field2d/#robots","text":"If you read the page about the nav_robot class, then you'll know what kind of data you'll need. Field2D nodes have an array of nav_robot classes, which get turned into strings the same way that an individual nav_robot class would via nav_robot.EncodeToString(). This is done so that tracking multiple bots can be supported.","title":"Robots"},{"location":"dt_dsp_field2d/#paths","text":"Field2D nodes have an array of nav_path classes as well. These can represent really whatever you want, as long as whatever you want is a collection of points in 3D space. Some ideas: * A trail showing where the robot has been * A visualization of an auto * Estimated positions of the robot (though you could use more nav_robot classes for this)","title":"Paths"},{"location":"dt_dsp_field2d/#markers","text":"Field markers (the nav_marker class) represent things. They're just images that have a position, rotation, and scale. You can use them to represent Apriltags that the robot can see, game pieces that it has detected, or you can use them as ways to show events like an impact (which could ruin odometry). You can draw anything you want using nav_path classes, but using a nav_marker is usually quicker.","title":"Markers"},{"location":"dt_dsp_field2d/#the-field-editor","text":"As mentioned at the top of this page, Field2D nodes can also be used to send data as well as receive it. You do this by clicking the little pencil icon in the top left of the display, which opens the field editor . [image of editor button] This editor allows you to manually draw paths, place robots, or place markers on the field by clicking.","title":"The Field Editor"},{"location":"dt_dsp_field2d/#addingremoving-field-elements","text":"Field elements of each type can be added by clicking the plus icon next to the name. You'll see an entry appear in the corresponding list for the new field element, and depending on what it is you can place it onto the field. For paths, creating a new path puts the editor into 'draw mode'. You click to place new path points, and either press 'Enter' or click the checkmark button to finish drawing the path. For robots/markers, just move your mouse to wherever you want to place it and left-click to place. Before you place it, you can use the scrollwheel to rotate it. After placing a field element you can change it via the list entry. Paths can be re-drawn and their color can be changed, robot settings can be edited, and so on. Removing a field element is as simple as clicking the red 'x' to the right of it's entry in the list.","title":"Adding/Removing Field Elements"},{"location":"dt_dsp_field2d/#uploading-the-finished-field","text":"When finished, you can click the 'save' button. This will convert the field that you made into a string, and send it to NetworkTables. Now any code that you set up to read from that NetworkTables key can use the field data for whatever you want. Also, pressing the save button will tell Drivetools to save the data in the loaded layout (.lyt file) automatically. That way, closing and re-opening the software will preserve exactly the field in the editor. Not all NetworkTables data gets saved in the layout! It's only the data that you yourself pushed manually .","title":"Uploading The Finished Field"},{"location":"dt_dsp_field2d/#trying-to-getreceive-data-at-the-same-time","text":"...just don't. Don't try this. When in the field editor the Field2D node will in theory ignore whatever's happening on NetworkTables, but it's better to not try and use the Field2D nodes as two-way, unless you really know what you're doing.","title":"Trying To Get/Receive Data At The Same Time"},{"location":"dt_dsp_field3d/","text":"","title":"Field3D Display"},{"location":"dt_dsp_image/","text":"Image Display Nodes These allow you to define some images, and the display will pick one of them based on the value that it sees on NetworkTables. It works like an array. A value of 0 on NetworkTables will load the first image, a value of 1 the second, and so on. You also define a default image to use when the value doesn't have an image associated with it. This can be used for a few different things, but mostly making your dashboard look better: * showing what 'mode' your robot is in * displaying what elevator level is selected with a picture of the elevator * creating boolean indicators with images that are either red or green * putting information on the dashboard via static images","title":"Image Display"},{"location":"dt_dsp_image/#image-display-nodes","text":"These allow you to define some images, and the display will pick one of them based on the value that it sees on NetworkTables. It works like an array. A value of 0 on NetworkTables will load the first image, a value of 1 the second, and so on. You also define a default image to use when the value doesn't have an image associated with it. This can be used for a few different things, but mostly making your dashboard look better: * showing what 'mode' your robot is in * displaying what elevator level is selected with a picture of the elevator * creating boolean indicators with images that are either red or green * putting information on the dashboard via static images","title":"Image Display Nodes"},{"location":"dt_dsp_text/","text":"","title":"Text Display"},{"location":"dt_install/","text":"Installing DriveTools Here are your installation options: GitHub : See the DriveTools GitHub page for instructions on installation.","title":"Installation"},{"location":"dt_install/#installing-drivetools","text":"Here are your installation options: GitHub : See the DriveTools GitHub page for instructions on installation.","title":"Installing DriveTools"},{"location":"dt_net_basics/","text":"","title":"What Is NetworkTables?"},{"location":"dt_net_connecting/","text":"Connecting Drivetools to an FRC Robot In order for Drivetools to connect, you first have to connect to the robot's wifi and make sure that the 'Communication' indicator on FRC Driverstation is green. You don't have to have FRC Driverstation open, but I would recommend it. [photo of Driverstation UI showing green communication] From here, open Drivetools and enter the settings menu. Under 'Network' there are a bunch of fields that you need to make sure are correct. First, the team number should be your FRC team number. [photo] The server 'Server IP' should use the form \"10.AB.CD.2\" where ABCD is your team number. People who have spent a little time with robot networks should be familiar with this. Once that's done, you should see the little connection indicator go from red to green. [photo of connection indicator] You shouldn't need to re-launch Drivetools, or save anything. Just close the settings window, the software should connect automatically.","title":"Connecting To The Robot"},{"location":"dt_net_connecting/#connecting-drivetools-to-an-frc-robot","text":"In order for Drivetools to connect, you first have to connect to the robot's wifi and make sure that the 'Communication' indicator on FRC Driverstation is green. You don't have to have FRC Driverstation open, but I would recommend it. [photo of Driverstation UI showing green communication] From here, open Drivetools and enter the settings menu. Under 'Network' there are a bunch of fields that you need to make sure are correct. First, the team number should be your FRC team number. [photo] The server 'Server IP' should use the form \"10.AB.CD.2\" where ABCD is your team number. People who have spent a little time with robot networks should be familiar with this. Once that's done, you should see the little connection indicator go from red to green. [photo of connection indicator] You shouldn't need to re-launch Drivetools, or save anything. Just close the settings window, the software should connect automatically.","title":"Connecting Drivetools to an FRC Robot"},{"location":"dt_rob_about/","text":"The _ROBOT_ Folder After downloading Drivetools and unzipping the .zip file, you should see one folder in particular called \"_ROBOT_\". This folder has nothing to do with Drivetools itself, and instead contains java code for use in your robot project. You may delete the folder entirely, move it, or just completely ignore it. It's just example code. The main reason for the folder's existence is that Drivetools transforms its complicated data classes into strings before sending them over NetworkTables, and writing code to turn these strings back into useful data. So I'm providing all of the code to do that for you. The folder contains scripts for the following: field data path data robot data (all of these classes start with the prefix 'nav ' which stands for 'navigation'. That's the naming convention that I use internally within Drivetools, but feel free to change it) It's worth noting that as you update Drivetools, the code you have on your robot may possibly stop working. It's unlikely, but if bugs do occur then update the .java files to the ones found in the _Robot_ folder from the version you're actually using.","title":"What Is This Folder?"},{"location":"dt_rob_about/#the-_robot_-folder","text":"After downloading Drivetools and unzipping the .zip file, you should see one folder in particular called \"_ROBOT_\". This folder has nothing to do with Drivetools itself, and instead contains java code for use in your robot project. You may delete the folder entirely, move it, or just completely ignore it. It's just example code. The main reason for the folder's existence is that Drivetools transforms its complicated data classes into strings before sending them over NetworkTables, and writing code to turn these strings back into useful data. So I'm providing all of the code to do that for you. The folder contains scripts for the following: field data path data robot data (all of these classes start with the prefix 'nav ' which stands for 'navigation'. That's the naming convention that I use internally within Drivetools, but feel free to change it) It's worth noting that as you update Drivetools, the code you have on your robot may possibly stop working. It's unlikely, but if bugs do occur then update the .java files to the ones found in the _Robot_ folder from the version you're actually using.","title":"The _ROBOT_ Folder"},{"location":"dt_rob_nav_field/","text":"","title":"nav_field"},{"location":"dt_rob_nav_path/","text":"","title":"nav_path"},{"location":"dt_rob_nav_robot/","text":"","title":"nav_robot"},{"location":"dt_rob_vectors/","text":"","title":"Vectors"}]}